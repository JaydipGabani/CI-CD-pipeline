{
  "_from": "jenkins",
  "_id": "jenkins@0.27.0",
  "_inBundle": false,
  "_integrity": "sha512-d8Ww7vNQEToBeeJ1QupgEsOKRQzJVylzc2KcSxObW41YD1maQid1JIvPHNhgQvrZfFmFytx9PiZAi/LCq5c2eA==",
  "_location": "/jenkins",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "jenkins",
    "fetchSpec": "latest",
    "name": "jenkins",
    "raw": "jenkins",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jenkins/-/jenkins-0.27.0.tgz",
  "_shasum": "a458cdd383563d93131ff77d7d09605d032fc8d5",
  "_shrinkwrap": null,
  "_spec": "jenkins",
  "_where": "C:\\Users\\Sandi\\DevopsProject",
  "author": {
    "email": "silas@sewell.org",
    "name": "Silas Sewell"
  },
  "bugs": {
    "url": "https://github.com/silas/node-jenkins/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "papi": "^0.29.0"
  },
  "deprecated": false,
  "description": "Jenkins client",
  "devDependencies": {
    "async": "^2.6.1",
    "bluebird": "^3.5.1",
    "fixturefiles": "^0.3.0",
    "form-data": "^2.3.2",
    "istanbul": "^0.4.5",
    "jscs": "^3.0.7",
    "jshint": "^2.9.5",
    "lodash": "^4.17.10",
    "mocha": "^5.2.0",
    "nock": "^9.3.2",
    "node-uuid": "^1.4.8",
    "should": "^13.2.1",
    "sinon": "^5.1.1"
  },
  "homepage": "https://github.com/silas/node-jenkins#readme",
  "keywords": [
    "jenkins"
  ],
  "license": "MIT",
  "main": "./lib",
  "name": "jenkins",
  "optionalDependencies": {},
  "readme": "# Jenkins\r\n\r\nThis is a Node.js client for [Jenkins](http://jenkins-ci.org/).\r\n\r\n## Documentation\r\n\r\n * jenkins: [init](#init), [info](#info)\r\n * build: [get](#build-get), [log](#build-log), [logStream](#build-log-stream), [stop](#build-stop), [term](#build-term)\r\n * job: [build](#job-build), [get config](#job-config-get), [set config](#job-config-set), [copy](#job-config-copy), [create](#job-create), [destroy](#job-destroy), [disable](#job-disable), [enable](#job-enable), [exists](#job-exists), [get](#job-get), [list](#job-list)\r\n * label: [get](#label-get)\r\n * node: [get config](#node-config-get), [create](#node-create), [destroy](#node-destroy), [disconnect](#node-disconnect), [disable](#node-disable), [enable](#node-enable), [exists](#node-exists), [get](#node-get), [list](#node-list)\r\n * queue: [list](#queue-list), [item](#queue-item), [cancel](#queue-cancel)\r\n * view: [get config](#view-config-get), [set config](#view-config-set), [create](#view-create), [destroy](#view-destroy), [exists](#view-exists), [get](#view-get), [list](#view-list), [add job](#view-add), [remove job](#view-remove)\r\n\r\n<a name=\"promise\"></a>\r\n### Promise\r\n\r\nPromise support can be enabled by setting `promisify` to `true` in Node `>= 0.12` or passing a wrapper (ex: `bluebird.fromCallback`) in older versions.\r\n\r\n<a name=\"common-options\"></a>\r\n### Common Options\r\n\r\nThese options will be passed along with any call, although only certain endpoints support them.\r\n\r\n * depth (Number, default: 0): how much data to return (see [depth control](https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API#RemoteaccessAPI-Depthcontrol))\r\n * tree (String, optional): path expression (see Jenkins API documentation for more information)\r\n\r\n<a name=\"init\"></a>\r\n### jenkins([options])\r\n\r\nInitialize a new Jenkins client.\r\n\r\nOptions\r\n\r\n * baseUrl (String): Jenkins URL\r\n * crumbIssuer (Boolean, default: false): enable CSRF Protection support\r\n * formData (Function, optional): enable file upload support on parameterized builds (must pass in `require('form-data')` as value for this option)\r\n * headers (Object, optional): headers included in every request\r\n * promisify (Boolean|Function, optional): convert callback methods to promises\r\n * and more via [papi](https://github.com/silas/node-papi#client)\r\n\r\nUsage\r\n\r\n``` javascript\r\nvar jenkins = require('jenkins')({ baseUrl: 'http://user:pass@localhost:8080', crumbIssuer: true });\r\n```\r\n\r\n<a name=\"info\"></a>\r\n### jenkins.info(callback)\r\n\r\nGet server information.\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.info(function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('info', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"assignedLabels\": [\r\n    {}\r\n  ],\r\n  \"description\": null,\r\n  \"jobs\": [\r\n    {\r\n      \"color\": \"blue\",\r\n      \"name\": \"example\",\r\n      \"url\": \"http://localhost:8080/job/example/\"\r\n    }\r\n  ],\r\n  \"mode\": \"NORMAL\",\r\n  \"nodeDescription\": \"the master Jenkins node\",\r\n  \"nodeName\": \"\",\r\n  \"numExecutors\": 2,\r\n  \"overallLoad\": {},\r\n  \"primaryView\": {\r\n    \"name\": \"All\",\r\n    \"url\": \"http://localhost:8080/\"\r\n  },\r\n  \"quietingDown\": false,\r\n  \"slaveAgentPort\": 12345,\r\n  \"unlabeledLoad\": {},\r\n  \"useCrumbs\": false,\r\n  \"useSecurity\": false,\r\n  \"views\": [\r\n    {\r\n      \"name\": \"All\",\r\n      \"url\": \"http://localhost:8080/\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n<a name=\"build-get\"></a>\r\n### jenkins.build.get(options, callback)\r\n\r\nGet build information.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n * number (Integer): build number\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.build.get('example', 1, function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('build', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"actions\": [],\r\n  \"buildable\": true,\r\n  \"builds\": [\r\n    {\r\n      \"number\": 1,\r\n      \"url\": \"http://localhost:8080/job/example/1/\"\r\n    }\r\n  ],\r\n  \"color\": \"blue\",\r\n  \"concurrentBuild\": false,\r\n  \"description\": \"\",\r\n  \"displayName\": \"example\",\r\n  \"displayNameOrNull\": null,\r\n  \"downstreamProjects\": [],\r\n  \"firstBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"healthReport\": [\r\n    {\r\n      \"description\": \"Build stability: No recent builds failed.\",\r\n      \"iconUrl\": \"health-80plus.png\",\r\n      \"score\": 100\r\n    }\r\n  ],\r\n  \"inQueue\": false,\r\n  \"keepDependencies\": false,\r\n  \"lastBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"lastCompletedBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"lastFailedBuild\": null,\r\n  \"lastStableBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"lastSuccessfulBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"lastUnstableBuild\": null,\r\n  \"lastUnsuccessfulBuild\": null,\r\n  \"name\": \"example\",\r\n  \"nextBuildNumber\": 2,\r\n  \"property\": [],\r\n  \"queueItem\": null,\r\n  \"scm\": {},\r\n  \"upstreamProjects\": [],\r\n  \"url\": \"http://localhost:8080/job/example/\"\r\n}\r\n```\r\n\r\n<a name=\"build-log\"></a>\r\n### jenkins.build.log(options, callback)\r\n\r\nGet build log.\r\n\r\nOptions\r\n\r\n* name (String): job name\r\n* number (Integer): build number\r\n* start (Integer, optional): start offset\r\n* type (String, enum: text, html, default: text): output format\r\n* meta (Boolean, default: false): return object with text (log data), more (boolean if there is more log data), and size (used with start to offset on subsequent calls)\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.build.log('example', 1, function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('log', data);\r\n});\r\n```\r\n\r\n<a name=\"build-log-stream\"></a>\r\n### jenkins.build.logStream(options, callback)\r\n\r\nGet build log stream.\r\n\r\nOptions\r\n\r\n* name (String): job name\r\n* number (Integer): build number\r\n* type (String, enum: text, html, default: text): output format\r\n* delay (Integer, default: 1000): poll interval in milliseconds\r\n\r\nUsage\r\n\r\n``` javascript\r\nvar log = jenkins.build.logStream('example', 1);\r\n\r\nlog.on('data', function(text) {\r\n  process.stdout.write(text);\r\n});\r\n\r\nlog.on('error', function(err) {\r\n  console.log('error', err);\r\n});\r\n\r\nlog.on('end', function() {\r\n  console.log('end');\r\n});\r\n```\r\n\r\n<a name=\"build-stop\"></a>\r\n### jenkins.build.stop(options, callback)\r\n\r\nStop build.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n * number (Integer): build number\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.build.stop('example', 1, function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"build-term\"></a>\r\n### jenkins.build.term(options, callback)\r\n\r\nTerminates build.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n * number (Integer): build number\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.build.term('example', 1, function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"job-build\"></a>\r\n### jenkins.job.build(options, callback)\r\n\r\nTrigger build.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n * parameters (Object, optional): build parameters\r\n * token (String, optional): authorization token\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.build('example', function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('queue item number', data);\r\n});\r\n```\r\n\r\n``` javascript\r\njenkins.job.build({ name: 'example', parameters: { name: 'value' } }, function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n``` javascript\r\njenkins.job.build({ name: 'example', parameters: { file: fs.createReadStream('test.txt') } }, function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"job-config-get\"></a>\r\n### jenkins.job.config(options, callback)\r\n\r\nGet job XML configuration.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.config('example', function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('xml', data);\r\n});\r\n```\r\n\r\n<a name=\"job-config-set\"></a>\r\n### jenkins.job.config(options, callback)\r\n\r\nUpdate job XML configuration.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n * xml (String): configuration XML\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.config('example', xml, function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"job-config-copy\"></a>\r\n### jenkins.job.copy(options, callback)\r\n\r\nCreate job by copying existing job.\r\n\r\nOptions\r\n\r\n * name (String): new job name\r\n * from (String): source job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.copy('fromJob', 'example', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"job-create\"></a>\r\n### jenkins.job.create(options, callback)\r\n\r\nCreate job from scratch.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n * xml (String): configuration XML\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.create('example', xml, function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"job-destroy\"></a>\r\n### jenkins.job.destroy(options, callback)\r\n\r\nDelete job.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.destroy('example', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"job-disable\"></a>\r\n### jenkins.job.disable(options, callback)\r\n\r\nDisable job.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.disable('example', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"job-enable\"></a>\r\n### jenkins.job.enable(options, callback)\r\n\r\nEnable job.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.enable('example', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"job-exists\"></a>\r\n### jenkins.job.exists(options, callback)\r\n\r\nCheck job exists.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.exists('example', function(err, exists) {\r\n  if (err) throw err;\r\n\r\n  console.log('exists', exists);\r\n});\r\n```\r\n\r\n<a name=\"job-get\"></a>\r\n### jenkins.job.get(options, callback)\r\n\r\nGet job information.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.get('example', function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('job', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"actions\": [],\r\n  \"buildable\": true,\r\n  \"builds\": [\r\n    {\r\n      \"number\": 1,\r\n      \"url\": \"http://localhost:8080/job/example/1/\"\r\n    }\r\n  ],\r\n  \"color\": \"blue\",\r\n  \"concurrentBuild\": false,\r\n  \"description\": \"\",\r\n  \"displayName\": \"example\",\r\n  \"displayNameOrNull\": null,\r\n  \"downstreamProjects\": [],\r\n  \"firstBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"healthReport\": [\r\n    {\r\n      \"description\": \"Build stability: No recent builds failed.\",\r\n      \"iconUrl\": \"health-80plus.png\",\r\n      \"score\": 100\r\n    }\r\n  ],\r\n  \"inQueue\": false,\r\n  \"keepDependencies\": false,\r\n  \"lastBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"lastCompletedBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"lastFailedBuild\": null,\r\n  \"lastStableBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"lastSuccessfulBuild\": {\r\n    \"number\": 1,\r\n    \"url\": \"http://localhost:8080/job/example/1/\"\r\n  },\r\n  \"lastUnstableBuild\": null,\r\n  \"lastUnsuccessfulBuild\": null,\r\n  \"name\": \"example\",\r\n  \"nextBuildNumber\": 2,\r\n  \"property\": [],\r\n  \"queueItem\": null,\r\n  \"scm\": {},\r\n  \"upstreamProjects\": [],\r\n  \"url\": \"http://localhost:8080/job/example/\"\r\n}\r\n```\r\n\r\n<a name=\"job-list\"></a>\r\n### jenkins.job.list(callback)\r\n\r\nList jobs.\r\n\r\nOptions\r\n\r\n * name (String, optional): folder name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.job.list(function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('jobs', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n[\r\n  {\r\n    \"color\": \"blue\",\r\n    \"name\": \"example\",\r\n    \"url\": \"http://localhost:8080/job/example/\"\r\n  }\r\n]\r\n```\r\n\r\n<a name=\"label-get\"></a>\r\n### jenkins.label.get(options, callback)\r\n\r\nGet label information.\r\n\r\nOptions\r\n\r\n * name (String): label name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.label.get('master', function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('label', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"_class\": \"hudson.model.labels.LabelAtom\",\r\n  \"actions\": [],\r\n  \"busyExecutors\": 0,\r\n  \"clouds\": [],\r\n  \"description\": null,\r\n  \"idleExecutors\": 2,\r\n  \"loadStatistics\": {\r\n    \"_class\": \"hudson.model.Label$1\"\r\n  },\r\n  \"name\": \"master\",\r\n  \"nodes\": [\r\n    {\r\n      \"_class\": \"hudson.model.Hudson\",\r\n      \"nodeName\": \"\"\r\n    }\r\n  ],\r\n  \"offline\": false,\r\n  \"tiedJobs\": [],\r\n  \"totalExecutors\": 2,\r\n  \"propertiesList\": []\r\n}\r\n```\r\n\r\n<a name=\"node-config-get\"></a>\r\n### jenkins.node.config(options, callback)\r\n\r\nGet node XML configuration.\r\n\r\nOptions\r\n\r\n * name (String): node name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.node.config('example', function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('xml', data);\r\n});\r\n```\r\n\r\n<a name=\"node-create\"></a>\r\n### jenkins.node.create(options, callback)\r\n\r\nCreate node.\r\n\r\nOptions\r\n\r\n * name (String): node name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.node.create('slave', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"node-destroy\"></a>\r\n### jenkins.node.destroy(options, callback)\r\n\r\nDelete node.\r\n\r\nOptions\r\n\r\n * name (String): node name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.node.destroy('slave', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"node-disconnect\"></a>\r\n### jenkins.node.disconnect(options, callback)\r\n\r\nDisconnect node.\r\n\r\nOptions\r\n\r\n * name (String): node name\r\n * message (String, optional): reason for being disconnected\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.node.disconnect('slave', 'no longer used', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"node-disable\"></a>\r\n### jenkins.node.disable(options, callback)\r\n\r\nDisable node.\r\n\r\nOptions\r\n\r\n * name (String): node name\r\n * message (String, optional): reason for being disabled\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.node.disable('slave', 'network failure', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"node-enable\"></a>\r\n### jenkins.node.enable(options, callback)\r\n\r\nEnable node.\r\n\r\nOptions\r\n\r\n * name (String): node name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.node.enable('slave', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"node-exists\"></a>\r\n### jenkins.node.exists(options, callback)\r\n\r\nCheck node exists.\r\n\r\nOptions\r\n\r\n * name (String): node name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.node.exists('slave', function(err, exists) {\r\n  if (err) throw err;\r\n\r\n  console.log('exists', exists);\r\n});\r\n```\r\n\r\n<a name=\"node-get\"></a>\r\n### jenkins.node.get(options, callback)\r\n\r\nGet node information.\r\n\r\nOptions\r\n\r\n * name (String): node name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.node.get('slave', function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('node', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"actions\": [],\r\n  \"displayName\": \"slave\",\r\n  \"executors\": [\r\n    {},\r\n    {}\r\n  ],\r\n  \"icon\": \"computer-x.png\",\r\n  \"idle\": true,\r\n  \"jnlpAgent\": true,\r\n  \"launchSupported\": false,\r\n  \"loadStatistics\": {},\r\n  \"manualLaunchAllowed\": true,\r\n  \"monitorData\": {\r\n    \"hudson.node_monitors.ArchitectureMonitor\": null,\r\n    \"hudson.node_monitors.ClockMonitor\": null,\r\n    \"hudson.node_monitors.DiskSpaceMonitor\": null,\r\n    \"hudson.node_monitors.ResponseTimeMonitor\": {\r\n      \"average\": 5000\r\n    },\r\n    \"hudson.node_monitors.SwapSpaceMonitor\": null,\r\n    \"hudson.node_monitors.TemporarySpaceMonitor\": null\r\n  },\r\n  \"numExecutors\": 2,\r\n  \"offline\": true,\r\n  \"offlineCause\": null,\r\n  \"offlineCauseReason\": \"\",\r\n  \"oneOffExecutors\": [],\r\n  \"temporarilyOffline\": false\r\n}\r\n```\r\n\r\n<a name=\"node-list\"></a>\r\n### jenkins.node.list(callback)\r\n\r\nList all nodes.\r\n\r\nOptions\r\n\r\n * full (Boolean, default: false): include executor count in response\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.node.list(function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('nodes', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"busyExecutors\": 0,\r\n  \"computer\": [\r\n    {\r\n      \"actions\": [],\r\n      \"displayName\": \"master\",\r\n      \"executors\": [\r\n        {},\r\n        {}\r\n      ],\r\n      \"icon\": \"computer.png\",\r\n      \"idle\": true,\r\n      \"jnlpAgent\": false,\r\n      \"launchSupported\": true,\r\n      \"loadStatistics\": {},\r\n      \"manualLaunchAllowed\": true,\r\n      \"monitorData\": {\r\n        \"hudson.node_monitors.ArchitectureMonitor\": \"Linux (amd64)\",\r\n        \"hudson.node_monitors.ClockMonitor\": {\r\n          \"diff\": 0\r\n        },\r\n        \"hudson.node_monitors.DiskSpaceMonitor\": {\r\n          \"path\": \"/var/lib/jenkins\",\r\n          \"size\": 77620142080\r\n        },\r\n        \"hudson.node_monitors.ResponseTimeMonitor\": {\r\n          \"average\": 0\r\n        },\r\n        \"hudson.node_monitors.SwapSpaceMonitor\": {\r\n          \"availablePhysicalMemory\": 22761472,\r\n          \"availableSwapSpace\": 794497024,\r\n          \"totalPhysicalMemory\": 515358720,\r\n          \"totalSwapSpace\": 805302272\r\n        },\r\n        \"hudson.node_monitors.TemporarySpaceMonitor\": {\r\n          \"path\": \"/tmp\",\r\n          \"size\": 77620142080\r\n        }\r\n      },\r\n      \"numExecutors\": 2,\r\n      \"offline\": false,\r\n      \"offlineCause\": null,\r\n      \"offlineCauseReason\": \"\",\r\n      \"oneOffExecutors\": [],\r\n      \"temporarilyOffline\": false\r\n    },\r\n    {\r\n      \"actions\": [],\r\n      \"displayName\": \"slave\",\r\n      \"executors\": [\r\n        {},\r\n        {}\r\n      ],\r\n      \"icon\": \"computer-x.png\",\r\n      \"idle\": true,\r\n      \"jnlpAgent\": true,\r\n      \"launchSupported\": false,\r\n      \"loadStatistics\": {},\r\n      \"manualLaunchAllowed\": true,\r\n      \"monitorData\": {\r\n        \"hudson.node_monitors.ArchitectureMonitor\": null,\r\n        \"hudson.node_monitors.ClockMonitor\": null,\r\n        \"hudson.node_monitors.DiskSpaceMonitor\": null,\r\n        \"hudson.node_monitors.ResponseTimeMonitor\": {\r\n          \"average\": 5000\r\n        },\r\n        \"hudson.node_monitors.SwapSpaceMonitor\": null,\r\n        \"hudson.node_monitors.TemporarySpaceMonitor\": null\r\n      },\r\n      \"numExecutors\": 2,\r\n      \"offline\": true,\r\n      \"offlineCause\": null,\r\n      \"offlineCauseReason\": \"\",\r\n      \"oneOffExecutors\": [],\r\n      \"temporarilyOffline\": false\r\n    }\r\n  ],\r\n  \"displayName\": \"nodes\",\r\n  \"totalExecutors\": 2\r\n}\r\n```\r\n\r\n<a name=\"queue-list\"></a>\r\n### jenkins.queue.list(callback)\r\n\r\nList queues.\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.queue.list(function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('queues', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"items\": [\r\n    {\r\n      \"actions\": [\r\n        {\r\n          \"causes\": [\r\n            {\r\n              \"shortDescription\": \"Started by user anonymous\",\r\n              \"userId\": null,\r\n              \"userName\": \"anonymous\"\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      \"blocked\": true,\r\n      \"buildable\": false,\r\n      \"buildableStartMilliseconds\": 1389418977387,\r\n      \"id\": 20,\r\n      \"inQueueSince\": 1389418977358,\r\n      \"params\": \"\",\r\n      \"stuck\": false,\r\n      \"task\": {\r\n        \"color\": \"blue_anime\",\r\n        \"name\": \"example\",\r\n        \"url\": \"http://localhost:8080/job/example/\"\r\n      },\r\n      \"url\": \"queue/item/20/\",\r\n      \"why\": \"Build #2 is already in progress (ETA:N/A)\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n<a name=\"queue-item\"></a>\r\n### jenkins.queue.item(options, callback)\r\n\r\nLookup a queue item.\r\n\r\nOptions\r\n\r\n * number (Integer): queue item number\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.queue.item(130, function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('item', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"actions\": [\r\n    {\r\n      \"causes\": [\r\n        {\r\n          \"shortDescription\": \"Started by user anonymous\",\r\n          \"userId\": null,\r\n          \"userName\": \"anonymous\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"blocked\": false,\r\n  \"buildable\": false,\r\n  \"id\": 130,\r\n  \"inQueueSince\": 1406363479853,\r\n  \"params\": \"\",\r\n  \"stuck\": false,\r\n  \"task\": {\r\n    \"name\": \"test-job-b7ef0845-6515-444c-96a1-d2266d5e0f18\",\r\n    \"url\": \"http://localhost:8080/job/test-job-b7ef0845-6515-444c-96a1-d2266d5e0f18/\",\r\n    \"color\": \"blue\"\r\n  },\r\n  \"url\": \"queue/item/130/\",\r\n  \"why\": null,\r\n  \"executable\" : {\r\n    \"number\" : 28,\r\n    \"url\" : \"http://localhost:8080/job/test-job-b7ef0845-6515-444c-96a1-d2266d5e0f18/28/\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n<a name=\"queue-cancel\"></a>\r\n### jenkins.queue.cancel(options, callback)\r\n\r\nCancel build in queue.\r\n\r\nOptions\r\n\r\n * number (Integer): queue item id\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.queue.cancel(23, function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"view-config-get\"></a>\r\n### jenkins.view.config(options, callback)\r\n\r\nGet view XML configuration.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.view.config('example', function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('xml', data);\r\n});\r\n```\r\n\r\n<a name=\"view-config-set\"></a>\r\n### jenkins.job.config(options, callback)\r\n\r\nUpdate view XML configuration.\r\n\r\nOptions\r\n\r\n * name (String): job name\r\n * xml (String): configuration XML\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.view.config('example', xml, function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"view-create\"></a>\r\n### jenkins.view.create(options, callback)\r\n\r\nCreate view.\r\n\r\nOptions\r\n\r\n * name (String): view name\r\n * type (String, enum: list, my): view type\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.view.create('example', 'list', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"view-destroy\"></a>\r\n### jenkins.view.destroy(options, callback)\r\n\r\nDelete view.\r\n\r\nOptions\r\n\r\n * name (String): view name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.view.destroy('example', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"view-exists\"></a>\r\n### jenkins.view.exists(options, callback)\r\n\r\nCheck view exists.\r\n\r\nOptions\r\n\r\n * name (String): view name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.view.exists('example', function(err, exists) {\r\n  if (err) throw err;\r\n\r\n  console.log('exists', exists);\r\n});\r\n```\r\n\r\n<a name=\"view-get\"></a>\r\n### jenkins.view.get(options, callback)\r\n\r\nGet view information.\r\n\r\nOptions\r\n\r\n * name (String): view name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.view.get('example', function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('view', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"description\": null,\r\n  \"jobs\": [\r\n    {\r\n      \"name\": \"test\",\r\n      \"url\": \"http://localhost:8080/job/example/\",\r\n      \"color\": \"blue\"\r\n    }\r\n  ],\r\n  \"name\": \"example\",\r\n  \"property\": [],\r\n  \"url\": \"http://localhost:8080/view/example/\"\r\n}\r\n```\r\n\r\n<a name=\"view-list\"></a>\r\n### jenkins.view.list(callback)\r\n\r\nList all views.\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.view.list(function(err, data) {\r\n  if (err) throw err;\r\n\r\n  console.log('views', data);\r\n});\r\n```\r\n\r\nResult\r\n\r\n``` json\r\n{\r\n  \"views\": [\r\n    {\r\n      \"url\": \"http://localhost:8080/\",\r\n      \"name\": \"All\"\r\n    },\r\n    {\r\n      \"url\": \"http://localhost:8080/view/example/\",\r\n      \"name\": \"Test\"\r\n    }\r\n  ],\r\n  \"useSecurity\": false,\r\n  \"useCrumbs\": false,\r\n  \"unlabeledLoad\": {},\r\n  \"slaveAgentPort\": 0,\r\n  \"quietingDown\": false,\r\n  \"primaryView\": {\r\n    \"url\": \"http://localhost:8080/\",\r\n    \"name\": \"All\"\r\n  },\r\n  \"assignedLabels\": [\r\n    {}\r\n  ],\r\n  \"mode\": \"NORMAL\",\r\n  \"nodeDescription\": \"the master Jenkins node\",\r\n  \"nodeName\": \"\",\r\n  \"numExecutors\": 2,\r\n  \"description\": null,\r\n  \"jobs\": [\r\n    {\r\n      \"color\": \"notbuilt\",\r\n      \"url\": \"http://localhost:8080/job/example/\",\r\n      \"name\": \"test\"\r\n    }\r\n  ],\r\n  \"overallLoad\": {}\r\n}\r\n```\r\n\r\n<a name=\"view-add\"></a>\r\n### jenkins.view.add(options, callback)\r\n\r\nAdd job to view.\r\n\r\nOptions\r\n\r\n * name (String): view name\r\n * job (String): job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.view.add('example', 'jobExample', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n<a name=\"view-remove\"></a>\r\n### jenkins.view.remove(options, callback)\r\n\r\nRemove job from view.\r\n\r\nOptions\r\n\r\n * name (String): view name\r\n * job (String): job name\r\n\r\nUsage\r\n\r\n``` javascript\r\njenkins.view.remove('example', 'jobExample', function(err) {\r\n  if (err) throw err;\r\n});\r\n```\r\n\r\n## Test\r\n\r\nRun unit tests\r\n\r\n```sh\r\n$ npm test\r\n```\r\n\r\nRun acceptance tests\r\n\r\n```sh\r\n$ docker-compose -f test/docker-compose.yml up -d\r\n$ npm run acceptance\r\n$ docker-compose -f test/docker-compose.yml down\r\n```\r\n\r\n## License\r\n\r\nThis work is licensed under the MIT License (see the LICENSE file).\r\n\r\n## Notes\r\n\r\n[python-jenkins](https://github.com/openstack/python-jenkins) (BSD License, see NOTES)\r\nwas used as a reference when implementing this client and its\r\ncreate/reconfigure job XML was used in the tests.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/silas/node-jenkins.git"
  },
  "scripts": {
    "acceptance": "NOCK_OFF=true NOCK_REC=false JENKINS_TEST_URL=http://admin:admin@localhost:8080 mocha --recursive --check-leaks --timeout 15000",
    "cover": "istanbul cover ./node_modules/.bin/_mocha -- --recursive --check-leaks --timeout 15000 && open coverage/lcov-report/index.html",
    "test": "jshint lib test && jscs lib test && istanbul cover ./node_modules/.bin/_mocha -- --recursive --check-leaks --timeout 15000"
  },
  "version": "0.27.0"
}
